{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeWinnings.tsx","views/Home/components/LotteryJackpot.tsx","views/Home/components/LotteryCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnAssetCard.tsx","hooks/useLotteryTotalPrizesUsd.ts","views/Home/components/WinCard.tsx","views/Home/Home.tsx","../node_modules/lodash/max.js","../node_modules/lodash/_baseExtremum.js","../node_modules/lodash/_baseGt.js"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","pow","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","value","lineHeight","eq","CardBusdValue","color","style","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","decimals","fontSize","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","id","disabled","length","onClick","count","UnlockButton","CakeWinnings","claimAmount","cakeAmount","claimAmountBusd","LotteryJackpot","lotteryPrizeAmount","useTotalRewards","lotteryPrizeAmountCake","toLocaleString","undefined","maximumFractionDigits","lotteryPrizeAmountBusd","bold","amount","StyledLotteryCard","LotteryCard","lotteryHasDrawn","useGetLotteryHasDrawn","requestClaim","setRequestedClaim","allowance","useLotteryAllowance","useModal","PurchaseWarningModal","onPresentApprove","useTotalClaim","setLastUpdated","onMultiClaim","useMultiClaimLottery","useApproval","handleApprove","requestedApproval","handleClaim","console","error","max","tokenName","onPresentBuy","marginRight","variant","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responsedata","fetchData","useGetStats","tvl","total_value_locked_all","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","farmsLP","useFarms","prices","useGetApiPrices","cakePrice","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteTokenPriceUsd","getAddress","quoteToken","toLowerCase","totalLiquidity","times","getFarmApr","poolWeight","maxApr","animation","justifyContent","exact","activeClassName","to","mt","EarnAssetCard","activeNonCakePools","pools","pool","isFinished","earningToken","symbol","includes","latestPools","orderBy","slice","assets","join","useLotteryTotalPrizesUsd","totalRewards","WinCard","lotteryPrize","Math","round","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","baseExtremum","require","baseGt","identity","module","exports","array","isSymbol","iteratee","comparator","current","computed","result","other"],"mappings":"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","file":"static/js/12.67315e7a.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst CakeHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {!cakePriceBusd.eq(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/cake-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'CAKE to Harvest')}:</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'CAKE in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting CAKE')\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`, {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { BigNumber } from 'bignumber.js'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\ninterface CakeWinningsProps {\n  claimAmount: BigNumber\n}\n\nconst CakeWinnings: React.FC<CakeWinningsProps> = ({ claimAmount }) => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const cakeAmount = getBalanceNumber(claimAmount)\n  const cakePriceBusd = usePriceCakeBusd()\n  const claimAmountBusd = new BigNumber(cakeAmount).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={cakeAmount} lineHeight=\"1.5\" />\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={claimAmountBusd} decimals={2} />}\n    </Block>\n  )\n}\n\nexport default CakeWinnings\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalRewards } from 'hooks/useTickets'\nimport useI18n from 'hooks/useI18n'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardBusdValue from './CardBusdValue'\n\nconst LotteryJackpot = () => {\n  const TranslateString = useI18n()\n  const lotteryPrizeAmount = useTotalRewards()\n  const balance = getBalanceNumber(lotteryPrizeAmount)\n  const lotteryPrizeAmountCake = balance.toLocaleString(undefined, {\n    maximumFractionDigits: 2,\n  })\n  const cakePriceBusd = usePriceCakeBusd()\n  const lotteryPrizeAmountBusd = new BigNumber(balance).multipliedBy(cakePriceBusd).toNumber()\n\n  return (\n    <>\n      <Text bold fontSize=\"24px\" style={{ lineHeight: '1.5' }}>\n        {TranslateString(999, `${lotteryPrizeAmountCake} CAKE`, { amount: lotteryPrizeAmountCake })}\n      </Text>\n      {!cakePriceBusd.eq(0) ? <CardBusdValue value={lotteryPrizeAmountBusd} /> : <br />}\n    </>\n  )\n}\n\nexport default LotteryJackpot\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, useModal } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport BuyModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\nimport { useLotteryAllowance } from 'hooks/useAllowance'\nimport { useApproval } from 'hooks/useApproval'\nimport PurchaseWarningModal from 'views/Lottery/components/TicketCard/PurchaseWarningModal'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeWinnings from './CakeWinnings'\nimport LotteryJackpot from './LotteryJackpot'\n\nconst StyledLotteryCard = styled(Card)`\n  background-image: url('/images/ticket-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  display: flex;\n  margin-top: 24px;\n  button {\n    flex: 1 0 50%;\n  }\n`\n\nconst LotteryCard = () => {\n  const { account } = useWeb3React()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const [requestClaim, setRequestedClaim] = useState(false)\n  const TranslateString = useI18n()\n  const allowance = useLotteryAllowance()\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\n  const { claimAmount, setLastUpdated } = useTotalClaim()\n  const { onMultiClaim } = useMultiClaimLottery()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const { handleApprove, requestedApproval } = useApproval(onPresentApprove)\n\n  const handleClaim = useCallback(async () => {\n    try {\n      setRequestedClaim(true)\n      const txHash = await onMultiClaim()\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedClaim(false)\n        setLastUpdated()\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiClaim, setRequestedClaim, setLastUpdated])\n\n  const renderLotteryTicketButtonBuyOrApprove = () => {\n    if (!allowance.toNumber()) {\n      return (\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n          {TranslateString(494, 'Approve CAKE')}\n        </Button>\n      )\n    }\n    return (\n      <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy} disabled={lotteryHasDrawn}>\n        {TranslateString(558, 'Buy Tickets')}\n      </Button>\n    )\n  }\n\n  const [onPresentBuy] = useModal(<BuyModal max={cakeBalance} tokenName=\"CAKE\" />)\n\n  return (\n    <StyledLotteryCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(550, 'Your Lottery Winnings')}\n        </Heading>\n        <CardImage src=\"/images/ticket.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(552, 'CAKE to Collect')}:</Label>\n          <CakeWinnings claimAmount={claimAmount} />\n        </Block>\n        <Block>\n          <Label>{TranslateString(554, 'Total jackpot this round')}:</Label>\n          <LotteryJackpot />\n        </Block>\n        {account ? (\n          <Actions>\n            <Button\n              id=\"dashboard-collect-winnings\"\n              disabled={getBalanceNumber(claimAmount) === 0 || requestClaim}\n              onClick={handleClaim}\n              style={{ marginRight: '8px' }}\n            >\n              {TranslateString(556, 'Collect Winnings')}\n            </Button>\n            {renderLotteryTicketButtonBuyOrApprove()}\n          </Actions>\n        ) : (\n          <Actions>\n            <UnlockButton width=\"100%\" />\n          </Actions>\n        )}\n      </CardBody>\n    </StyledLotteryCard>\n  )\n}\n\nexport default LotteryCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Cake Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total CAKE Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total CAKE Burned')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New CAKE/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={22} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  const data = useGetStats()\n  const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(762, 'Total Value Locked (TVL)')}\n        </Heading>\n        {data ? (\n          <>\n            <Heading size=\"xl\">{`$${tvl}`}</Heading>\n            <Text color=\"textSubtle\">{TranslateString(764, 'Across all LPs and Syrup Pools')}</Text>\n          </>\n        ) : (\n          <Skeleton height={66} />\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useState } from 'react'\n\n/*\n * Due to Cors the api was forked and a proxy was created\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\n */\nexport const baseUrl = 'https://api.pancakeswap.com/api/v1'\n\n/* eslint-disable camelcase */\n\nexport interface ApiTvlResponse {\n  update_at: string\n  '24h_total_volume': number\n  total_value_locked: number\n  total_value_locked_all: number\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<ApiTvlResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`${baseUrl}/tvl`)\n        const responsedata: ApiTvlResponse = await response.json()\n\n        setData(responsedata)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js'\nimport { getFarmApr } from 'utils/apr'\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\nimport { getAddress } from 'utils/addressHelpers'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const prices = useGetApiPrices()\n  const cakePrice = usePriceCakeBusd()\n\n  const highestApr = useMemo(() => {\n    const aprs = farmsLP\n      // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n      .filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n      .map((farm) => {\n        if (farm.lpTotalInQuoteToken && prices) {\n          const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n          return getFarmApr(farm.poolWeight, cakePrice, totalLiquidity)\n        }\n        return null\n      })\n\n    const maxApr = max(aprs)\n    return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }, [cakePrice, farmsLP, prices])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Earn up to\n        </Heading>\n        <CardMidContent color=\"#7645d9\">\n          {highestApr ? (\n            `${highestApr}% ${TranslateString(736, 'APR')}`\n          ) : (\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n          )}\n        </CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            in Farms\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport orderBy from 'lodash/orderBy'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport pools from 'config/constants/pools'\nimport { Pool } from 'state/types'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background: linear-gradient(#53dee9, #7645d9);\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAssetCard = () => {\n  const activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\n  const latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\n  // Always include CAKE\n  const assets = ['CAKE', ...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Earn\n        </Heading>\n        <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            in Pools\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAssetCard\n","import { usePriceCakeBusd } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalRewards } from './useTickets'\n\nconst useLotteryTotalPrizesUsd = () => {\n  const totalRewards = useTotalRewards()\n  const totalCake = getBalanceNumber(totalRewards)\n  const cakePriceBusd = usePriceCakeBusd()\n\n  return totalCake * cakePriceBusd.toNumber()\n}\n\nexport default useLotteryTotalPrizesUsd\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport useLotteryTotalPrizesUsd from 'hooks/useLotteryTotalPrizesUsd'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst WinCard = () => {\n  const lotteryPrize = Math.round(useLotteryTotalPrizesUsd())\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Lottery with\n        </Heading>\n        <CardMidContent color=\"#7645d9\">\n          {lotteryPrize !== 0 ? (\n            `$${lotteryPrize.toLocaleString()}`\n          ) : (\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n          )}\n        </CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            up for grabs\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default WinCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport WinCard from 'views/Home/components/WinCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/pan-bg-mobile.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n          {TranslateString(576, 'BitDogeSwap')}\n        </Heading>\n        <Text>{TranslateString(578, 'BitDogeSwap Hello word.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <LotteryCard />\n        </Cards>\n        <CTACards>\n          <EarnAPRCard />\n          <EarnAssetCard />\n          <WinCard />\n        </CTACards>\n        <Cards>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n"],"sourceRoot":""}