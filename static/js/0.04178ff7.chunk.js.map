{"version":3,"sources":["hooks/usePreviousValue.ts","hooks/useLastUpdated.ts","hooks/useTickets.ts","hooks/useTokenBalance.ts","views/Home/components/CardBusdValue.tsx","views/Home/components/CardValue.tsx","hooks/useGetLotteryHasDrawn.ts","hooks/useAllowance.ts","utils/lotteryUtils.ts","hooks/useBuyLottery.ts","hooks/useApproval.ts","views/Lottery/components/TicketCard/PurchaseWarningModal.tsx","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx"],"names":["usePreviousValue","value","ref","useRef","useEffect","current","useLastUpdated","useState","Date","now","lastUpdated","setStateLastUpdated","previousLastUpdated","setLastUpdated","useTotalRewards","BigNumber","rewards","setRewards","lotteryContract","useLottery","fastRefresh","useRefresh","a","getTotalRewards","res","fetchBalance","useTotalClaim","claimAmount","setClaimAmount","claimLoading","setClaimLoading","account","useWeb3React","ticketsContract","useLotteryTicket","useCallback","getTotalClaim","claim","useWinningNumbers","winningNumbers","setWinningNumbers","getWinningNumbers","useMatchingRewardLength","numbers","matchingNumbers","setMatchingNumbers","getMatchingRewardLength","matchedNumbaers","useTickets","lotteryNumber","tickets","setTickets","getTickets","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","web3","useWeb3","contract","getBep20Contract","balanceOf","useTokenBalance","CardBusdValue","props","fontSize","lineHeight","color","prefix","bold","decimals","CardValue","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","style","useGetLotteryHasDrawn","lotteryHasDrawn","setLotteryHasDrawn","getLotteryStatus","state","fetchLotteryStatus","useLotteryAllowance","allowance","setAllowance","useCake","getLotteryAddress","fetchAllowance","useIfoAllowance","tokenContract","spenderAddress","dependency","console","error","fetch","multiCall","abi","calls","getWeb3NoAccount","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","length","i","newCalls","slice","calldata","map","toLowerCase","encodeFunctionData","aggregate","returnData","concat","index","decodeFunctionResult","multiBuy","price","numbersList","times","pow","toString","send","from","on","tx","transactionHash","customLotteryNum","issueIndex","getTicketsAmount","calls1","Array","apply","options","address","ticketAbi","tokenIds","id","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","eq","push","calls3","multiClaim","claimedStatus","unClaimedIds","filter","lotteryAbi","finalTokenIds","r","drawed","calls4","reduce","p","c","sum","getMax","maxNumber","getLotteryIssueIndex","matchNumber","historyAmount","amount","div","LOTTERY_TICKET_PRICE","toNumber","parseInt","historyNumbers","useMultiClaimLottery","lotteryTicketContract","onMultiClaim","txHash","useMultiBuyLottery","onMultiBuy","useMaxNumber","max","setMax","fetchMax","useApproval","onPresentApprove","requestedApproval","setRequestedApproval","onApprove","useLotteryApprove","handleApprove","TicketsList","styled","theme","colors","primary","WarningModal","onDismiss","TranslateString","useI18n","title","width","onClick","StyledSpacer","spacing","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TicketInput","symbol","availableSymbol","onChange","onSelectMax","alignItems","type","inputMode","min","placeholder","size","toLocaleString","Tips","BuyTicketModal","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","useMemo","getBalanceNumber","maxTickets","getFullDisplayBalance","handleBuy","Math","floor","random","handleSelectMax","Number","LOTTERY_MAX_NUMBER_OF_TICKETS","e","currentTarget","validity","valid","num","Announce","Final","ModalActions","variant","disabled","isInteger"],"mappings":"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","file":"static/js/0.04178ff7.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = () => {\n    setStateLastUpdated(Date.now())\n  }\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport useRefresh from './useRefresh'\nimport {\n  getTotalRewards,\n  getTotalClaim,\n  getMatchingRewardLength,\n  getWinningNumbers,\n  getTickets,\n} from '../utils/lotteryUtils'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTickets = (lotteryNumber = null) => {\n  const [tickets, setTickets] = useState([])\n  const { account } = useWeb3React()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\n      setTickets(res)\n    }\n\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\n\n  return tickets\n}\n\nexport const useTotalRewards = () => {\n  const [rewards, setRewards] = useState(new BigNumber(0))\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTotalRewards(lotteryContract)\n      setRewards(new BigNumber(res))\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, fastRefresh])\n\n  return rewards\n}\n\nexport const useTotalClaim = () => {\n  const [claimAmount, setClaimAmount] = useState(new BigNumber(0))\n  const [claimLoading, setClaimLoading] = useState(false)\n  const { account } = useWeb3React()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  const fetchBalance = useCallback(async () => {\n    setClaimLoading(true)\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\n    setClaimAmount(claim)\n    setClaimLoading(false)\n  }, [account, lotteryContract, ticketsContract])\n\n  useEffect(() => {\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, fetchBalance, lotteryContract, ticketsContract, lastUpdated])\n\n  return { claimLoading, claimAmount, setLastUpdated }\n}\n\nexport const useWinningNumbers = () => {\n  const [winningNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const rewards = await getWinningNumbers(lotteryContract)\n      setWinningNumbers(rewards)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\n\n  return winningNumbers\n}\n\nexport const useMatchingRewardLength = (numbers) => {\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const matchedNumbaers = await getMatchingRewardLength(lotteryContract, numbers)\n      setMatchingNumbers(matchedNumbaers)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, numbers, fastRefresh])\n\n  return matchingNumbers\n}\n\nexport default useTickets\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import { useEffect, useState } from 'react'\nimport { useLottery } from 'hooks/useContract'\nimport { getLotteryStatus } from 'utils/lotteryUtils'\n\n/**\n * Returns whether or not the current lottery has drawn numbers\n *\n * @return {Boolean}\n */\nconst useGetLotteryHasDrawn = () => {\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\n  const lotteryContract = useLottery()\n\n  useEffect(() => {\n    if (lotteryContract) {\n      const fetchLotteryStatus = async () => {\n        const state = await getLotteryStatus(lotteryContract)\n        setLotteryHasDrawn(state)\n      }\n\n      fetchLotteryStatus()\n    }\n  }, [lotteryContract])\n\n  return lotteryHasDrawn\n}\n\nexport default useGetLotteryHasDrawn\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport { useCake } from './useContract'\nimport useRefresh from './useRefresh'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await cakeContract.methods.allowance(account, getLotteryAddress()).call()\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchAllowance()\n    }\n  }, [account, cakeContract, fastRefresh])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\n  const { account } = useWeb3React()\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.error(e)\n      }\n    }\n\n    if (account) {\n      fetch()\n    }\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3NoAccount } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport ticketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { LOTTERY_TICKET_PRICE } from 'config'\nimport { AbiItem } from 'web3-utils'\nimport { getMulticallAddress } from './addressHelpers'\n\nexport const multiCall = async (abi, calls) => {\n  const web3 = getWeb3NoAccount()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n  let res = []\n  if (calls.length > 100) {\n    let i = 0\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n      const { returnData } = await multi.methods.aggregate(calldata).call()\n      i++\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\n    }\n  } else {\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n    const { returnData } = await multi.methods.aggregate(calldata).call()\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\n  }\n  return res\n}\n\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIndex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\n  const length = await getTicketsAmount(ticketsContract, account)\n\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n  const ticketIssues = await multiCall(ticketAbi, calls2)\n\n  const finalTokenids = []\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (new BigNumber(ticketIssue).eq(issueIndex)) {\n      finalTokenids.push(tokenIds[i])\n    }\n  })\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\n  const tickets = await multiCall(ticketAbi, calls3)\n\n  await getLotteryStatus(lotteryContract)\n  return tickets\n}\n\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.methods.balanceOf(account).call()\n}\n\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.methods.issueIndex().call()\n  const length = await getTicketsAmount(ticketsContract, account)\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n  const claimedStatus = await multiCall(ticketAbi, calls2)\n\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\n\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n  const rewards = await multiCall(lotteryAbi, calls3)\n\n  let finalTokenIds = []\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finalTokenIds.push(unClaimedIds[i])\n    }\n  })\n\n  if (finalTokenIds.length > 200) {\n    finalTokenIds = finalTokenIds.slice(0, 200)\n  }\n\n  try {\n    return lotteryContract.methods\n      .multiClaim(finalTokenIds)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIndex = await lotteryContract.methods.issueIndex().call()\n    const length = await getTicketsAmount(ticketsContract, account)\n    // eslint-disable-next-line prefer-spread\n    const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n      ticketsContract.options.address,\n      'tokenOfOwnerByIndex',\n      [account, i],\n    ])\n    const res = await multiCall(ticketAbi, calls1)\n    const tokenIds = res.map((id) => id.toString())\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n    const ticketIssues = await multiCall(ticketAbi, calls2)\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n    const claimedStatus = await multiCall(ticketAbi, calls3)\n\n    const drawed = await getLotteryStatus(lotteryContract)\n\n    const finalTokenIds = []\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIndex) {\n      } else if (!claimedStatus[i][0]) {\n        finalTokenIds.push(tokenIds[i])\n      }\n    })\n\n    const calls4 = finalTokenIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n\n    const rewards = await multiCall(lotteryAbi, calls4)\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), new BigNumber(0))\n\n    return claim\n  } catch (err) {\n    console.error(err)\n  }\n  return new BigNumber(0)\n}\n\nexport const getTotalRewards = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return lotteryContract.methods.getTotalRewards(issueIndex).call()\n}\n\nexport const getMax = async (lotteryContract) => {\n  return lotteryContract.methods.maxNumber().call()\n}\n\nexport const getLotteryIssueIndex = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return issueIndex\n}\n\nexport const getLotteryStatus = async (lotteryContract) => {\n  return lotteryContract.methods.drawed().call()\n}\n\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIndex = await lotteryContract.methods.issueIndex().call()\n  const drawed = await lotteryContract.methods.drawed().call()\n  if (!drawed) {\n    issueIndex -= 1\n  }\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIndex, 5 - matchNumber).call()\n\n    return new BigNumber(amount).div(new BigNumber(10).pow(18)).div(LOTTERY_TICKET_PRICE).toNumber()\n  } catch (err) {\n    console.error(err)\n  }\n  return 0\n}\n\nexport const getWinningNumbers = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  const numbers = []\n  const drawed = await lotteryContract.methods.drawed().call()\n\n  if (!drawed && parseInt(issueIndex, 10) === 0) {\n    return [0, 0, 0, 0]\n  }\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIndex - 1, i).call()).toString())\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\n    }\n  }\n  return numbers\n}\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\n\nexport const useMultiClaimLottery = () => {\n  const { account } = useWeb3React()\n  const lotteryContract = useLottery()\n  const lotteryTicketContract = useLotteryTicket()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\n      return txHash\n    } catch (e) {\n      return false\n    }\n  }, [account, lotteryContract, lotteryTicketContract])\n\n  return { onMultiClaim: handleClaim }\n}\n\nexport const useMultiBuyLottery = () => {\n  const { account } = useWeb3React()\n  const lotteryContract = useLottery()\n\n  const handleBuy = useCallback(\n    async (amount: string, numbers: Array<any>) => {\n      try {\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\n        return txHash\n      } catch (e) {\n        return false\n      }\n    },\n    [account, lotteryContract],\n  )\n\n  return { onMultiBuy: handleBuy }\n}\n\nexport const useMaxNumber = () => {\n  const [max, setMax] = useState(5)\n  const lotteryContract = useLottery()\n\n  const fetchMax = useCallback(async () => {\n    const maxNumber = await getMax(lotteryContract)\n    setMax(maxNumber)\n  }, [lotteryContract])\n\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchMax()\n    }\n  }, [lotteryContract, fetchMax])\n\n  return max\n}\n","import { useCallback, useState } from 'react'\nimport { useLotteryApprove } from './useApprove'\n\nexport const useApproval = (onPresentApprove: () => void) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { onApprove } = useLotteryApprove()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      // user rejected tx or didn't go thru\n      if (!txHash) {\n        setRequestedApproval(false)\n      }\n      onPresentApprove()\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, onPresentApprove])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport default useApproval\n","import React from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\n\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Modal title={TranslateString(466, 'Warning')} onDismiss={onDismiss}>\n      <TicketsList>\n        {TranslateString(468, 'Lottery ticket purchases are final.')}\n        <br />\n        {TranslateString(470, 'Your CAKE will not be returned to you after you spend it to buy tickets.')}\n        <br />\n        {TranslateString(472, 'Tickets are only valid for one lottery draw, and will be burned after the draw.')}\n        <br />\n        {TranslateString(\n          474,\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\n        )}\n      </TicketsList>\n      <ModalActions>\n        <Button width=\"100%\" onClick={onDismiss}>\n          {TranslateString(476, 'I understand')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nconst TicketsList = styled.div`\n  text-align: left;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nexport default WarningModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  availableSymbol: string\n  value: string\n  onSelectMax?: () => void\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void\n}\n\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <>\n      <Flex alignItems=\"center\">\n        <Input type=\"number\" inputMode=\"numeric\" min=\"0\" onChange={onChange} placeholder=\"0\" value={value} />\n        <StyledTokenAdornmentWrapper>\n          <StyledSpacer />\n          <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n          <StyledSpacer />\n          <Button size=\"sm\" onClick={onSelectMax}>\n            {TranslateString(452, 'Max')}\n          </Button>\n        </StyledTokenAdornmentWrapper>\n      </Flex>\n      <StyledMaxText>{TranslateString(454, `${max.toLocaleString()} ${availableSymbol} Available`)}</StyledMaxText>\n    </>\n  )\n}\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TicketInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\nimport useI18n from 'hooks/useI18n'\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE } from 'config'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onConfirm?: (amount: string, numbers: Array<number>) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getBalanceNumber(max)\n  }, [max])\n\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\n  }, [max])\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (e.currentTarget.validity.valid) {\n      setVal(e.currentTarget.value)\n    }\n  }\n\n  const { onMultiBuy } = useMultiBuyLottery()\n  const maxNumber = useMaxNumber()\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() => [\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n      ])\n      const txHash = await onMultiBuy(LOTTERY_TICKET_PRICE.toString(), numbers)\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > LOTTERY_MAX_NUMBER_OF_TICKETS) {\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\n    } else {\n      setVal(maxTickets.toString())\n    }\n  }, [maxTickets])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * LOTTERY_TICKET_PRICE\n  }\n  return (\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol=\"TICKET\"\n        availableSymbol=\"CAKE\"\n      />\n      <div>\n        <Tips>{TranslateString(999, `1 Ticket = ${LOTTERY_TICKET_PRICE} CAKE`, { num: LOTTERY_TICKET_PRICE })}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {TranslateString(\n            478,\n            'Ticket purchases are final. Your CAKE cannot be returned to you after buying tickets.',\n          )}\n        </Announce>\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} CAKE`)}</Final>\n      </div>\n      <ModalActions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          id=\"lottery-buy-complete\"\n          width=\"100%\"\n          disabled={\n            pendingTx ||\n            !Number.isInteger(parseInt(val)) ||\n            parseInt(val) > Number(maxTickets) ||\n            parseInt(val) > LOTTERY_MAX_NUMBER_OF_TICKETS ||\n            parseInt(val) < 1\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #ed4b9e;\n`\n"],"sourceRoot":""}